### Librerías necesarias 
library(nortest) # Anderson-Darling
library(forecast) # Librería necesaria para la función Arima
library(tseries) # Prueba Dickey-Fuller para estacionariedad

##### PRIMER EJEMPLO MA(1)

set.seed(1234)

# Simular un MA(1): Y_t = e_t + 0.7*e_{t-1}
ma1 = arima.sim(n = 200, list(ma = 0.7))

# Graficar la serie
ts.plot(ma1, main = "Serie de tiempo",
        ylab = "Y_t", col = "#F4B4C9", lwd = 2)

# Correlograma (ACF)
acf(ma1, main = "ACF")

# Correlograma parcial (PACF)
pacf(ma1, main = "PACF")


### SEGUNDO EJEMPLO MA(3)

# Simular un MA(3): Y_t = e_t + 0.6*e_{t-1}
                        # - 0.4*e_{t-2} + 0.3*e_{t-3}
ma3 <- arima.sim(n = 200, list(ma = c(0.6, -0.4, 0.3)))

# Graficar la serie
ts.plot(ma3, main = "Serie de tiempo",
        ylab = "Y_t", col = "#F4B4C9", lwd = 2)

# Correlograma (ACF)
acf(ma3, main = "ACF")

# Correlograma parcial (PACF)
pacf(ma3, main = "PACF")


### PRIMER EJEMPLO AR(1)

# Simular un AR(1): Y_t = 0.5*Y_{t-1} + e_t
ar1 <- arima.sim(n = 200, list(ar = 0.5))

# Graficar la serie
ts.plot(ar1, main = "Serie de tiempo",
        ylab = "Y_t", col = "#F4B4C9", lwd = 2)

# Correlograma (ACF)
acf(ar1, main = "ACF")

# Correlograma parcial (PACF)
pacf(ar1, main = "PACF")


### SEGUNDO EJEMPLO AR(4)

set.seed(456)

# Simular un AR(4): Y_t = 0.5*Y_{t-1} - 0.3*Y_{t-2} + 0.2*Y_{t-3}
                        # + 0.1*Y_{t-4} + e_t
ar4 = arima.sim(n = 500, list(ar = c(0.5, -0.3, 0.2, 0.1)))

# Graficar la serie
ts.plot(ar4, main = "Serie de tiempo",
        ylab = "Y_t", col = "#F4B4C9", lwd = 1)

# Correlograma (ACF)
acf(ar4, main = "ACF")

# Correlograma parcial (PACF)
pacf(ar4, main = "PACF")


### ARMA(1,1) Y_t = 0.6 Y_{t-1} + e_t - 0.4e_{t-1}

arma11 = arima.sim(n = 500,
          model = list(ar = 0.6, ma = -0.4))

# Graficar series
ts.plot(arma11, main = "Serie de tiempo",
        ylab = "Y_t", col = "#F4B4C9", lwd = 2)

# ACF y PACF
acf(arma11, main = "ACF")
pacf(arma11, main = "PACF")


### ARMA (2,2) Y_t = 0.6 Y_{t-1} + 0.3 Y_{t-2} + e_t  
                  # - 0.4e_{t-1} - 0.3 e_{t-2}

arma22 = arima.sim(n = 500,
                   model = list(ar = c(0.6, 0.3),
                                ma = c(-0.4, -0.3)))

# Graficar series
ts.plot(arma22, main = "Serie de tiempo",
        ylab = "Y_t", col = "#F4B4C9", lwd = 2)

# ACF y PACF
acf(arma22, main = "ACF")
pacf(arma22, main = "PACF")


                              ### VENTAS DE FARMACEÚTICOS ###

### Librerías necesarias 
library(nortest) # Anderson-Darling
library(forecast) # Librería necesaria para la función Arima
library(tseries) # Prueba Dickey-Fuller para estacionariedad

ventas = c(
  10618.1, 10537.9, 10209.3, 10553.0,  9934.9, 10534.5, 10196.5, 10511.8, 10089.6, 10371.2,
  10239.4, 10472.4, 10827.2, 10640.8, 10517.8, 10154.2,  9969.2, 10260.4, 10737.0, 10430.0,
  10689.0, 10430.4, 10002.4, 10135.7, 10096.2, 10288.7, 10289.1, 10589.9, 10551.9, 10208.3,
  10334.5, 10480.1, 10387.6, 10202.6, 10219.3, 10382.7, 10820.5, 10358.7, 10494.6, 10497.6,
  10431.5, 10447.8, 10684.4, 10176.5, 10616.0, 10627.7, 10684.0, 10246.7, 10265.0, 10090.4,
  9881.1, 10449.7, 10276.3, 10175.2, 10212.5, 10395.5, 10545.9, 10635.7, 10265.2, 10551.6,
  10538.2, 10286.2, 10171.3, 10393.1, 10162.3, 10164.5, 10327.0, 10365.1, 10755.9, 10463.6,
  10080.5, 10479.6,  9980.9, 10039.2, 10246.1, 10368.0, 10446.3, 10535.3, 10786.9,  9975.8,
  10160.9, 10422.1, 10757.2, 10463.8, 10307.0, 10134.7, 10207.7, 10488.0, 10262.3, 10785.9,
  10375.4, 10123.4, 10462.7, 10205.5, 10522.7, 10253.2, 10428.7, 10615.8, 10417.3, 10445.4,
  10690.6, 10271.8, 10524.8,  9815.0, 10398.5, 10553.1, 10655.8, 10199.1, 10416.6, 10391.3,
  10210.1, 10352.5, 10423.8, 10519.3, 10596.7, 10650.0, 10741.6, 10246.0, 10354.4, 10155.4
)

# Gráfica de la serie de tiempo
ventas_ts = ts(ventas, start = 1, frequency = 1) # Guardamos los datos como una serie de tiempo
plot(ventas_ts, main = "Ventas",
     xlab = "Semana", ylab = "Ventas (miles)",
     col = "#F4B4C9", lwd = 2) 


adf.test(ventas_ts) # Prueba de Dickey-Fuller para estacionariedad.

# Revisamos ACF y PACF
acf(ventas_ts, main = "ACF")
pacf(ventas_ts, main = "PACF")

# Ajustamos un modelo ARIMA automáticamente.

modelo = Arima(ventas_ts, order = c(3,0,3)) # Seleccionamos Arima
#modelo = auto.arima(ventas_ts)
summary(modelo)

residuales = as.numeric(modelo$residuals) # Guardamos residuales.
ajustados = as.numeric(modelo$fitted) # Guardamos valores ajustados.

# Gráfica de ajustados vs residuales
plot(ajustados, residuales, 
     xlab = "Valores ajustados", 
     ylab = "Residuales", 
     main = "Residuales vs Ajustados",
     pch = 16,  # punto sólido
     col = "#F4B4C9")
abline(h = 0, col = "#F06292", lty = 2)

checkresiduals(modelo)
ad.test(residuales) # Prueba de normalidad para los residuales
qqnorm(residuales)
qqline(residuales, col = "red")

# Gráfica de la serie de tiempo
plot(ventas_ts, main = "Ventas",
     xlab = "Semana", ylab = "Ventas (miles)",
     col = "#F4B4C9", lwd = 2) 
#points(ventas_ts, pch = 16, col = "#F4B4C9") # Graficamos los datos con circulos

ajustados_ts = ts(ajustados)

# Encimamos los valores ajustados.
lines(ajustados_ts, col = "#F06292", lwd = 2)
#points(ajustados, col = "#CE93D8", lwd = 2, pch = 16)

# Añadir leyenda
legend("topleft", legend = c("Original", "Ajustado"),
       col = c("#F4B4C9", "#F06292"), lwd = 2)





                                  ### PRODUCCIÓN DE QUESO ###

### Librerías necesarias 
library(nortest) # Anderson-Darling
library(forecast) # Librería necesaria para la función Arima
library(tseries) # Prueba Dickey-Fuller para estacionariedad

queso = c(
  7657, 5451, 10883, 9554, 9519, 10047, 10663, 10864, 11447, 12710, 
  15169, 16205, 14507, 15400, 16800, 19000, 20198, 18573, 19375, 21032, 
  23250, 25219, 28549, 29759,
  28262, 28506, 33885, 34776, 35347, 34628, 33043, 30214, 31013, 31496, 
  34115, 33433, 34198, 35863, 37789, 34561, 36434, 34371, 33307, 33295, 
  36514, 36593, 38311, 42773
)

# Gráfica de la serie de tiempo
queso_ts = ts(queso, start = 1950, frequency = 1) # Guardamos los datos como una serie de tiempo
plot(queso_ts, main = "Producción de queso",
     xlab = "Año", ylab = "Producción (miles de libras)",
     col = "#F4B4C9", lwd = 2) 
#points(queso_ts, pch = 16, col = "#CE93D8") # Graficamos los datos con circulos

########## Revisamos la primer diferencia

# Gráfica de la serie de tiempo
queso_diff = ts(diff(queso_ts))
plot(queso_diff, main = "Primera diferencia",
     xlab = "Diferencia", ylab = "Producción (miles de libras)",
     col = "#F4B4C9", lwd = 2) 
#points(queso_diff, pch = 16, col = "#CE93D8") # Graficamos los datos con circulos


adf.test(queso_diff) # Prueba de Dickey-Fuller para estacionariedad.

########## Revisamos la segunda diferencia

# Gráfica de la serie de tiempo
queso_diff2 = ts(diff(queso_diff))
plot(queso_diff2, main = "Segunda diferencia",
     xlab = "Diferencia", ylab = "Producción (miles de libras)",
     col = "#F4B4C9", lwd = 2)

#points(queso_diff2, pch = 16, col = "#CE93D8") # Graficamos los datos con circulos


adf.test(queso_diff2) # Prueba de Dickey-Fuller para estacionariedad.

# Revisamos ACF y PACF de la segunda diferencia
acf(queso_diff2, main = "ACF")
pacf(queso_diff2, main = "PACF")

# Los correlogramas indican un ARIMA(1,2,1), posiblemente.

# Ajustamos un modelo ARIMA


modelo = Arima(queso_ts, order = c(1,2,1)) # Seleccionamos el modelo arima
#modelo = auto.arima(queso_ts) #Se selecciona el "mejor" arima algorítmicamente.
summary(modelo)

residuales = as.numeric(modelo$residuals) # Guardamos residuales.
ajustados = as.numeric(modelo$fitted) # Guardamos valores ajustados.

# Gráfica de ajustados vs residuales
plot(ajustados, residuales, 
     xlab = "Valores ajustados", 
     ylab = "Residuales", 
     main = "Residuales vs Ajustados",
     pch = 16,  # punto sólido
     col = "#F4B4C9")

abline(h = 0, col = "#F06292", lty = 2)

checkresiduals(modelo)
ad.test(residuales) # Prueba de normalidad para los residuales
qqnorm(residuales)
qqline(residuales, col = "red")

# Gráfica de la serie de tiempo
plot(queso_ts, main = "Producción de queso",
     xlab = "Año", ylab = "Producción (miles de libras)",
     col = "#F4B4C9", lwd = 2) 
#points(queso, pch = 16, col = "#F4B4C9") # Graficamos los datos con circulos

ajustados_ts = ts(ajustados, start = 1950, frequency = 1)

# Encimamos los valores ajustados.
lines(ajustados_ts, col = "#F06292", lwd = 2)
#points(ajustados, col = "#CE93D8", lwd = 2, pch = 16)

# Añadir leyenda
legend("topleft", legend = c("Original", "Ajustado"),
       col = c("#F4B4C9", "#F06292"), lwd = 2)





                                  ### EJEMPLO DE AZUFRE ###

### Librerías necesarias 
library(nortest) # Anderson-Darling
library(forecast) # Librería necesaria para la función Arima
library(tseries) # Prueba Dickey-Fuller para estacionariedad

azufre = c(2108, 2407, 2697, 2550, 2635, 2730, 3069, 2480, 1950, 2511, 2370,
           2108, 2356, 2072, 1860, 2190, 2511, 2670, 2945, 2697, 2940, 2325,
           2310, 2263, 2976, 2744, 2418, 1800, 930, 2130, 2667, 2001, 2106,
           2350, 2091, 2651, 2171, 2614, 2692, 2285, 2130, 1979, 2063, 2222,
           2224, 2320, 2572, 2206, 2698, 2719, 2747, 2680, 2575, 2827, 3004,
           3119, 3426, 3645, 3512, 3247, 3220, 3062, 3566, 2920, 3018, 1848,
           2627, 2821, 2445, 2676, 1937, 2785, 3281, 2798, 2927, 3461, 3580,
           3581, 3454, 3240, 3110, 3308, 2934, 3266, 2822, 2712, 2472, 3444,
           3415, 3475, 2511, 3032, 2503, 2155, 2131, 2658, 2916, 3168, 3632,
           3612, 3232, 3229, 3624, 3990, 2723, 2401, 3514, 3898, 3533, 3279,
           3876, 3754, 3706, 2298, 3059, 3371, 2780, 2886, 3304, 3715, 3084,
           3110, 3711, 3329, 2863, 3411, 2579, 3270, 3205, 2401, 2318, 2621,
           2556, 2371, 2985, 2999, 2454, 3205, 3107, 2292, 1831, 1339, 1882,
           2632, 2051, 2272, 2893, 3021, 3007, 1760, 2396, 3095, 2616, 2084,
           2921, 3089, 2841, 2755, 3298, 3026, 2928, 3156, 2597, 2149, 2339,
           2513, 2124, 2617, 2746, 2058, 2418, 1690, 2305, 2191, 2215, 2695,
           1632, 1196, 1375, 1175, 903, 910, 1276, 1232, 1138, 888, 1322,
           1540, 1743, 1386, 731, 1350, 1832, 1317, 1982, 2477, 2220, 1772,
           1983, 2356, 2132, 2302, 2067, 2176, 2158, 2054, 2196, 1925, 1964,
           1273, 1364, 1229, 1211, 1119, 1067, 1213, 1058, 839, 1653, 1337,
           1349, 1347, 1311, 1302, 1510, 535, 368, 864)

az = ts(azufre, start = c(2000, 1), frequency = 12)

# Gráfica de la serie de tiempo
plot(az, main = "Minería mensual de azufre en Guanajuato",
     xlab = "Mes", ylab = "Toneladas",
     col = "#F4B4C9", lwd = 2) 
#points(az, pch = 16, col = "#CE93D8") # Graficamos los datos con circulos

adf.test(az) # Prueba de Dickey-Fuller para estacionariedad.


########## Revisamos la primer diferencia

az_diff = ts(diff(az))

# Gráfica de la serie de tiempo
plot(az_diff, main = "Primera diferencia",
     xlab = "Diferencia", ylab = "Toneladas",
     col = "#F4B4C9", lwd = 2) 
#points(az_diff, pch = 16, col = "#CE93D8") # Graficamos los datos con circulos

adf.test(az_diff) # Prueba de Dickey-Fuller para estacionariedad.

# Revisamos ACF y PACF de la segunda diferencia
acf(az_diff, main = "ACF")
pacf(az_diff, main = "PACF")


# Ajustamos un modelo ARIMA

modelo = Arima(az, order = c(2,1,2))
modelo = auto.arima(az)
summary(modelo)

residuales = as.numeric(modelo$residuals) # Guardamos residuales.
ajustados = as.numeric(modelo$fitted) # Guardamos valores ajustados.
checkresiduals(modelo)

# Gráfica de ajustados vs residuales
plot(ajustados, residuales, 
     xlab = "Valores ajustados", 
     ylab = "Residuales", 
     main = "Residuales vs Ajustados",
     pch = 16,  # punto sólido
     col = "#F4B4C9")
abline(h = 0, col = "#F06292", lty = 2)

# Prueba de Ljung-Box para analizar la autocorrelación de los residuales
#Box.test(residuales, lag = 40, type = "Ljung-Box")


ad.test(residuales) # Prueba de normalidad para los residuales
qqnorm(residuales)
qqline(residuales, col = "red")
hist(residuales)

# Gráfica de la serie de tiempo
plot(az, main = "Minería mensual de azufre en Guanajuato",
     xlab = "Mes", ylab = "Toneladas",
     col = "#F4B4C9", lwd = 2) 
#points(az, pch = 16, col = "#F4B4C9") # Graficamos los datos con circulos

ajustados_ts = ts(ajustados, , start = c(2000, 1), frequency = 12)

# Encimamos los valores ajustados.
lines(ajustados_ts, col = "#F06292", lwd = 2)
#points(ajustados, col = "#CE93D8", lwd = 2, pch = 16)

# Añadir leyenda
legend("topleft", legend = c("Original", "Ajustado"),
       col = c("#F4B4C9", "#F06292"), lwd = 2)

predic = forecast(modelo,12)
plot(predic, col = "#F06292", lwd = 2)
reales = c(0, 493, 1246, 1428, 1711, 1585, 1587, 1297, 313, 44, 0,133)
reales_ts = ts(reales, start = c(2019,1), frequency = 12)
lines(reales_ts, col = "orange", lwd = 2)
